---
title: "計量経済学応用（2024年度冬季集中）"
subtitle: "課題1"
author: "柳樂 優太 (1260404)"
date: today
language:
  en:
    crossref-fig-title: "図"
    crossref-tbl-title: "表"
format:
  pdf:
    pdf-engine: lualatex
    documentclass: ltjsarticle
    classoption: 
      - 11pt
      - a4paper
      - ja=standard
    number-sections: true
    include-in-header: 
      text: |
        \usepackage[haranoaji, deluxe]{luatexja-preset}
        \usepackage{indentfirst}
        \parindent = 1em
        \usepackage{dcolumn}
        \newcolumntype{.}{D{.}{.}{-1}}
        \usepackage{caption}
        \usepackage{hyperref}
knitr: 
  opts_chunk: 
    dev: "ragg_png"
    dpi: 300
    fig.align: "center"
    echo: true
    message: false
    warning: false
    fig.width: 5
    fig.height: 3
---
パッケージの読み込み
```{r}
#| echo: false
#| message: false
pacman::p_load(readxl,
               tidyverse,
               stringr,
               quantreg)
```




再度データを落としてきた．これを読み込んで，NAが95%を超える列を消してみよう
```{r}
myd_firm <- read_excel("data/firm_data.xlsx")

NA_col <- rep(NA,length(myd_firm))

for (i in 1:length(myd_firm)) {
  NA_col[i] <- sum(is.na(myd_firm[,i])) >= 0.95*nrow(myd_firm)
}

sum(NA_col == 1)
```



```{r}
myd_firm_clean <- myd_firm[,-c(which(NA_col))]
```






tとidとg_idを付与しよう


まずはt
```{r}
myd_firm_clean <- myd_firm_clean |>
  mutate(t = case_when(...3 == "P" ~ 20,
                       ...3 == "P-1" ~ 19,
                       ...3 == "P-2" ~ 18,
                       ...3 == "P-3" ~ 17,
                       ...3 == "P-4" ~ 16,
                       ...3 == "P-5" ~ 15,
                       ...3 == "P-6" ~ 14,
                       ...3 == "P-7" ~ 13,
                       ...3 == "P-8" ~ 12,
                       ...3 == "P-9" ~ 11,
                       ...3 == "P-10" ~ 10,
                       ...3 == "P-11" ~ 9,
                       ...3 == "P-12" ~ 8,
                       ...3 == "P-13" ~ 7,
                       ...3 == "P-14" ~ 6,
                       ...3 == "P-15" ~ 5,
                       ...3 == "P-16" ~ 4,
                       ...3 == "P-17" ~ 3,
                       ...3 == "P-18" ~ 2,
                       ...3 == "P-19" ~ 1))
```
続いてid

```{r}
myd_firm_clean <- myd_firm_clean |>
  mutate(id = as.integer(factor(...2)))
```
OK!

最後にg_id
```{r}
myd_firm_clean <- myd_firm_clean |>
  mutate(g_id = as.integer(factor(東証業種コード)))
```
perfect!

では，明らかにいらない最初の4行を消そう
```{r}
myd <- myd_firm_clean[,-c(1:4)]
```
データ整形はこれで終わった!

最後に，NAに0を代入しよう
```{r}
myd <- myd |> 
  mutate_all(~ifelse(is.na(.),0,.))
```

単位が記録されている行を分離
```{r}
myd_unit <- myd[1,]
myd <- myd[-1,]
```

chaをnumeに変換したい
```{r}
myd[] <- lapply(myd, as.numeric)
```

いよいよ裁量会計発生高の推定といこう

修正ジョーンズモデルを利用する

まずは必要な変数を作ろう
```{r}
#会計発生高
#有形固定資産
myd <- myd |> 
  mutate(ACC = `当期純利益（連結）［累計］` - `営業活動によるキャッシュフロー`,
         PPE = `有形固定資産`)

#売上変化
#流動負債変化
myd <- myd |> 
  group_by(id) |> 
  arrange(t, .by_group = T) |> 
  mutate(delt_S   = `売上高・営業収益［累計］` - lag(`売上高・営業収益［累計］`),
         delt_REC = `流動負債` - lag(`流動負債`),
         A = lag(`資産合計`)) |> 
  ungroup()

#スケーリング
myd <- myd |> 
  group_by(id) |> 
  arrange(t, .by_group = T) |> 
  mutate(y = ACC / A,
         x_0 = 1/A,
         x_1 = (delt_S - delt_REC)/A,
         x_2 = PPE / A) |> 
  ungroup()
```

データの整形
```{r}
myd_acc <- myd[,473:476]
myd_acc <- na.omit(myd_acc)
myd_acc <- myd_acc |> 
  mutate(x_0 = case_when(x_0 ==  Inf ~ 0,
                         x_0 == -Inf ~ 0,
                         x_0 ==  x_0 ~ x_0),
         x_1 = case_when(x_1 ==  Inf ~ 0,
                         x_1 == -Inf ~ 0,
                         x_1 ==  x_1 ~ x_1),
         x_2 = case_when(x_2 ==  Inf ~ 0,
                         x_2 == -Inf ~ 0,
                         x_2 ==  x_2 ~ x_2),
         y = case_when(y ==  Inf ~ 0,
                       y == -Inf ~ 0,
                       y ==  y   ~ y))
```

以下をベイズで実装し直そう．
```{r}
lm(y ~ 0 + x_0 + x_1 + x_2, data = myd_acc)
```


```{r}
myd <- myd |> 
  mutate(u = y - (-20.30710*x_0 + -0.02879*x_1 + -0.05337*x_2))
```


```{r}
ggplot(data = myd,
       aes(x = u,
           y = after_stat(density)))+
  geom_density()
```

```{r}
summary(myd$u)
```
```{r}

myd <- myd |> 
  mutate(u = case_when(u ==  Inf ~ 0,
                       u == -Inf ~ 0,
                       u ==  u ~ u))
```

```{r}
myd <- myd |> 
  mutate(u_nor =  (u - mean(u, na.rm = T))/sd(u, na.rm = T))
```


一旦ここで可視化してみよう
```{r}
ggplot(data = myd,
       aes(x = u_nor,
           y = after_stat(density)))+
  geom_density()
```

```{r}
myd <- myd |> 
  mutate(z = case_when(u_nor >=  1.96 ~  1,
                       u_nor <= -1.96 ~ -1))
```


```{r}
ggplot(data = myd,
      aes(x = z,
          y = after_stat(count)))+
  geom_bar()
```


これ，100万円単位で記録されている切断データやんけ

分位点回帰せなあかんのでは？？？

```{r}
lm(y ~ 0 + x_0 + x_1 + x_2, data = myd_acc)
#分位点回帰をしてみる
rq(y ~ 0 + x_0 + x_1 + x_2, data = myd_acc)
```
明らかに定数項が違う

残差の計算
```{r}
myd <- myd |> 
  mutate(u_q = y - (-32.51052070*x_0 + -0.01224305*x_1 + -0.07766466*x_2))
```

残差の整理
```{r}
myd <- myd |> 
  mutate(u_q = case_when(u_q ==  Inf ~ 0,
                         u_q == -Inf ~ 0,
                         u_q ==  u_q ~ u_q))
```

残差の標準化
```{r}
myd <- myd |> 
  mutate(u_nor_q =  (u_q - mean(u_q, na.rm = T))/sd(u_q, na.rm = T))
```


外れ値の計算と可視化
```{r}
myd <- myd |> 
  mutate(z_q = case_when(u_nor_q >=  1.96 ~  1,
                         u_nor_q <= -1.96 ~ -1))
```


```{r}
ggplot(data = myd,
      aes(x = z_q,
          y = after_stat(count))) +
  geom_bar()
```


